// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="umbral_umbral,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.234000,HLS_SYN_LAT=16387,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=99,HLS_SYN_LUT=116,HLS_VERSION=2020_2}" *)

module umbral (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [1:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [4:0] input_r_TID;
input  [5:0] input_r_TDEST;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [1:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [4:0] output_r_TID;
output  [5:0] output_r_TDEST;

 reg    ap_rst_n_inv;
reg    input_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [31:0] p_Val2_s_reg_238;
wire   [14:0] i_1_fu_173_p2;
wire    ap_CS_fsm_state2;
reg   [31:0] p_Result_2_fu_217_p4;
wire   [0:0] icmp_ln14_fu_179_p2;
reg   [14:0] i_reg_145;
reg   [31:0] temp_out_data_V_1_reg_156;
reg   [15:0] po_fu_92;
wire   [15:0] po_1_fu_199_p3;
wire   [31:0] i_cast_fu_188_p1;
wire   [0:0] p_Result_s_fu_192_p3;
wire   [0:0] p_Repl2_s_fu_207_p2;
wire   [15:0] zext_ln843_fu_213_p1;
reg   [3:0] ap_NS_fsm;
wire    regslice_both_output_V_data_V_U_apdone_blk;
reg    ap_block_state4;
wire    regslice_both_input_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_V_data_V_U_ack_in;
wire    regslice_both_input_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_V_keep_V_U_vld_out;
wire    regslice_both_input_V_keep_V_U_ack_in;
wire    regslice_both_input_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_V_strb_V_U_vld_out;
wire    regslice_both_input_V_strb_V_U_ack_in;
wire    regslice_both_input_V_user_V_U_apdone_blk;
wire   [1:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_V_user_V_U_vld_out;
wire    regslice_both_input_V_user_V_U_ack_in;
wire    regslice_both_input_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_V_last_V_U_vld_out;
wire    regslice_both_input_V_last_V_U_ack_in;
wire    regslice_both_input_V_id_V_U_apdone_blk;
wire   [4:0] input_r_TID_int_regslice;
wire    regslice_both_input_V_id_V_U_vld_out;
wire    regslice_both_input_V_id_V_U_ack_in;
wire    regslice_both_input_V_dest_V_U_apdone_blk;
wire   [5:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_V_dest_V_U_vld_out;
wire    regslice_both_input_V_dest_V_U_ack_in;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_V_data_V_U_vld_out;
wire    regslice_both_output_V_keep_V_U_apdone_blk;
wire    regslice_both_output_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_V_keep_V_U_vld_out;
wire    regslice_both_output_V_strb_V_U_apdone_blk;
wire    regslice_both_output_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_V_strb_V_U_vld_out;
wire    regslice_both_output_V_user_V_U_apdone_blk;
wire    regslice_both_output_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_V_user_V_U_vld_out;
wire    regslice_both_output_V_last_V_U_apdone_blk;
wire    regslice_both_output_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_V_last_V_U_vld_out;
wire    regslice_both_output_V_id_V_U_apdone_blk;
wire    regslice_both_output_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_V_id_V_U_vld_out;
wire    regslice_both_output_V_dest_V_U_apdone_blk;
wire    regslice_both_output_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

umbral_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_data_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_keep_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_strb_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 2 ))
regslice_both_input_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_user_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_last_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 5 ))
regslice_both_input_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_id_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 6 ))
regslice_both_input_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_dest_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(temp_out_data_V_1_reg_156),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_data_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_keep_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(4'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_strb_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 2 ))
regslice_both_output_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_user_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_last_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 5 ))
regslice_both_output_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(5'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_id_V_U_apdone_blk)
);

umbral_regslice_both #(
    .DataWidth( 6 ))
regslice_both_output_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(6'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_145 <= i_1_fu_173_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (input_r_TVALID_int_regslice == 1'b1))) begin
        i_reg_145 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        p_Val2_s_reg_238 <= input_r_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        po_fu_92 <= po_1_fu_199_p3;
        temp_out_data_V_1_reg_156 <= p_Result_2_fu_217_p4;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (input_r_TVALID_int_regslice == 1'b1))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (input_r_TVALID_int_regslice == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_V_data_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_V_data_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_173_p2 = (i_reg_145 + 15'd1);

assign i_cast_fu_188_p1 = i_reg_145;

assign icmp_ln14_fu_179_p2 = ((i_reg_145 == 15'd16384) ? 1'b1 : 1'b0);

assign input_r_TREADY = regslice_both_input_V_data_V_U_ack_in;

assign output_r_TVALID = regslice_both_output_V_data_V_U_vld_out;

assign p_Repl2_s_fu_207_p2 = ((po_1_fu_199_p3 != 16'd0) ? 1'b1 : 1'b0);

always @ (*) begin
    p_Result_2_fu_217_p4 = temp_out_data_V_1_reg_156;
    p_Result_2_fu_217_p4[i_cast_fu_188_p1] = |(zext_ln843_fu_213_p1);
end

assign p_Result_s_fu_192_p3 = p_Val2_s_reg_238[i_cast_fu_188_p1];

assign po_1_fu_199_p3 = ((p_Result_s_fu_192_p3[0:0] == 1'b1) ? po_fu_92 : 16'd255);

assign zext_ln843_fu_213_p1 = p_Repl2_s_fu_207_p2;

endmodule //umbral
