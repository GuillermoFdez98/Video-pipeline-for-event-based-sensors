-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity umbral is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of umbral is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "umbral_umbral,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.234000,HLS_SYN_LAT=16387,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=99,HLS_SYN_LUT=116,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv16_FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_s_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_173_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Result_2_fu_217_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_145 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_out_data_V_1_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal po_fu_92 : STD_LOGIC_VECTOR (15 downto 0);
    signal po_1_fu_199_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_cast_fu_188_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_192_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_s_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln843_fu_213_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal regslice_both_input_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_input_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_input_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_input_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_dest_V_U_ack_in : STD_LOGIC;
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component umbral_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_input_V_data_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_data_V_U_apdone_blk);

    regslice_both_input_V_keep_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_keep_V_U_apdone_blk);

    regslice_both_input_V_strb_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_strb_V_U_apdone_blk);

    regslice_both_input_V_user_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_user_V_U_apdone_blk);

    regslice_both_input_V_last_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_last_V_U_apdone_blk);

    regslice_both_input_V_id_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_id_V_U_apdone_blk);

    regslice_both_input_V_dest_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_dest_V_U_apdone_blk);

    regslice_both_output_V_data_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => temp_out_data_V_1_reg_156,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_data_V_U_apdone_blk);

    regslice_both_output_V_keep_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_keep_V_U_apdone_blk);

    regslice_both_output_V_strb_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_strb_V_U_apdone_blk);

    regslice_both_output_V_user_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_user_V_U_apdone_blk);

    regslice_both_output_V_last_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_last_V_U_apdone_blk);

    regslice_both_output_V_id_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv5_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_id_V_U_apdone_blk);

    regslice_both_output_V_dest_V_U : component umbral_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv6_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_145 <= i_1_fu_173_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
                i_reg_145 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_Val2_s_reg_238 <= input_r_TDATA_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                po_fu_92 <= po_1_fu_199_p3;
                temp_out_data_V_1_reg_156 <= p_Result_2_fu_217_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, icmp_ln14_fu_179_p2, regslice_both_output_V_data_V_U_apdone_blk, input_r_TVALID_int_regslice, output_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln14_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_V_data_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_assign_proc : process(regslice_both_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state4 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_1_fu_173_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv15_1));
    i_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_145),32));
    icmp_ln14_fu_179_p2 <= "1" when (i_reg_145 = ap_const_lv15_4000) else "0";

    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, input_r_TVALID_int_regslice)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state1, input_r_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (input_r_TVALID_int_regslice = ap_const_logic_1))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state3, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Repl2_s_fu_207_p2 <= "0" when (po_1_fu_199_p3 = ap_const_lv16_0) else "1";
    
    p_Result_2_fu_217_p4_proc : process(temp_out_data_V_1_reg_156, i_cast_fu_188_p1, zext_ln843_fu_213_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_2_fu_217_p4 <= temp_out_data_V_1_reg_156;
        if to_integer(unsigned(i_cast_fu_188_p1)) >= temp_out_data_V_1_reg_156'low and to_integer(unsigned(i_cast_fu_188_p1)) <= temp_out_data_V_1_reg_156'high then
            result(0) := '0';
            for i in zext_ln843_fu_213_p1'range loop
                result(0) := result(0) or zext_ln843_fu_213_p1(i);
            end loop;
            p_Result_2_fu_217_p4(to_integer(unsigned(i_cast_fu_188_p1))) <= result(0);
        end if;
    end process;

    p_Result_s_fu_192_p3 <= p_Val2_s_reg_238(to_integer(unsigned(i_cast_fu_188_p1)) downto to_integer(unsigned(i_cast_fu_188_p1))) when (to_integer(unsigned(i_cast_fu_188_p1))>= 0 and to_integer(unsigned(i_cast_fu_188_p1))<=31) else "-";
    po_1_fu_199_p3 <= 
        po_fu_92 when (p_Result_s_fu_192_p3(0) = '1') else 
        ap_const_lv16_FF;
    zext_ln843_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_s_fu_207_p2),16));
end behav;
