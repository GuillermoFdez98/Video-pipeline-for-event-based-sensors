// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eventsToImage_eventsToImage,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.720000,HLS_SYN_LAT=92775,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=230,HLS_SYN_LUT=663,HLS_VERSION=2020_2}" *)

module eventsToImage (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        input_r_TKEEP,
        input_r_TSTRB,
        input_r_TUSER,
        input_r_TLAST,
        input_r_TID,
        input_r_TDEST,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST,
        output_r_TID,
        output_r_TDEST,
        s_axi_hls_ctrl_AWVALID,
        s_axi_hls_ctrl_AWREADY,
        s_axi_hls_ctrl_AWADDR,
        s_axi_hls_ctrl_WVALID,
        s_axi_hls_ctrl_WREADY,
        s_axi_hls_ctrl_WDATA,
        s_axi_hls_ctrl_WSTRB,
        s_axi_hls_ctrl_ARVALID,
        s_axi_hls_ctrl_ARREADY,
        s_axi_hls_ctrl_ARADDR,
        s_axi_hls_ctrl_RVALID,
        s_axi_hls_ctrl_RREADY,
        s_axi_hls_ctrl_RDATA,
        s_axi_hls_ctrl_RRESP,
        s_axi_hls_ctrl_BVALID,
        s_axi_hls_ctrl_BREADY,
        s_axi_hls_ctrl_BRESP
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp1_stage0 = 9'd8;
parameter    ap_ST_fsm_pp1_stage1 = 9'd16;
parameter    ap_ST_fsm_pp1_stage2 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state12 = 9'd256;
parameter    C_S_AXI_HLS_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_HLS_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_HLS_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
input  [3:0] input_r_TKEEP;
input  [3:0] input_r_TSTRB;
input  [1:0] input_r_TUSER;
input  [0:0] input_r_TLAST;
input  [4:0] input_r_TID;
input  [5:0] input_r_TDEST;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [3:0] output_r_TKEEP;
output  [3:0] output_r_TSTRB;
output  [1:0] output_r_TUSER;
output  [0:0] output_r_TLAST;
output  [4:0] output_r_TID;
output  [5:0] output_r_TDEST;
input   s_axi_hls_ctrl_AWVALID;
output   s_axi_hls_ctrl_AWREADY;
input  [C_S_AXI_HLS_CTRL_ADDR_WIDTH - 1:0] s_axi_hls_ctrl_AWADDR;
input   s_axi_hls_ctrl_WVALID;
output   s_axi_hls_ctrl_WREADY;
input  [C_S_AXI_HLS_CTRL_DATA_WIDTH - 1:0] s_axi_hls_ctrl_WDATA;
input  [C_S_AXI_HLS_CTRL_WSTRB_WIDTH - 1:0] s_axi_hls_ctrl_WSTRB;
input   s_axi_hls_ctrl_ARVALID;
output   s_axi_hls_ctrl_ARREADY;
input  [C_S_AXI_HLS_CTRL_ADDR_WIDTH - 1:0] s_axi_hls_ctrl_ARADDR;
output   s_axi_hls_ctrl_RVALID;
input   s_axi_hls_ctrl_RREADY;
output  [C_S_AXI_HLS_CTRL_DATA_WIDTH - 1:0] s_axi_hls_ctrl_RDATA;
output  [1:0] s_axi_hls_ctrl_RRESP;
output   s_axi_hls_ctrl_BVALID;
input   s_axi_hls_ctrl_BREADY;
output  [1:0] s_axi_hls_ctrl_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] num_events;
reg   [13:0] img_address0;
reg    img_ce0;
reg    img_we0;
reg   [7:0] img_d0;
wire   [7:0] img_q0;
reg   [13:0] aux_keep_V_address0;
reg    aux_keep_V_ce0;
reg    aux_keep_V_we0;
reg   [3:0] aux_keep_V_d0;
wire   [3:0] aux_keep_V_q0;
reg   [13:0] aux_strb_V_address0;
reg    aux_strb_V_ce0;
reg    aux_strb_V_we0;
reg   [3:0] aux_strb_V_d0;
wire   [3:0] aux_strb_V_q0;
reg   [13:0] aux_user_V_address0;
reg    aux_user_V_ce0;
reg    aux_user_V_we0;
reg   [1:0] aux_user_V_d0;
wire   [1:0] aux_user_V_q0;
reg   [13:0] aux_last_V_address0;
reg    aux_last_V_ce0;
reg    aux_last_V_we0;
reg   [0:0] aux_last_V_d0;
wire   [0:0] aux_last_V_q0;
reg   [13:0] aux_id_V_address0;
reg    aux_id_V_ce0;
reg    aux_id_V_we0;
reg   [4:0] aux_id_V_d0;
wire   [4:0] aux_id_V_q0;
reg   [13:0] aux_dest_V_address0;
reg    aux_dest_V_ce0;
reg    aux_dest_V_we0;
reg   [5:0] aux_dest_V_d0;
wire   [5:0] aux_dest_V_q0;
reg    input_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln29_fu_412_p2;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln29_reg_567;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln74_reg_628;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln74_reg_628_pp2_iter1_reg;
reg   [14:0] i_1_reg_362;
reg   [14:0] i_2_reg_374;
reg   [31:0] num_events_read_reg_549;
wire    ap_CS_fsm_state1;
wire   [14:0] add_ln17_fu_389_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] add_ln29_fu_406_p2;
reg   [14:0] add_ln29_reg_562;
reg    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] tmp_reg_571;
wire   [0:0] icmp_ln878_fu_430_p2;
reg   [0:0] icmp_ln878_reg_575;
wire   [13:0] trunc_ln54_1_fu_435_p1;
reg   [13:0] trunc_ln54_1_reg_579;
wire   [0:0] icmp_ln58_fu_439_p2;
reg   [0:0] icmp_ln58_reg_584;
wire   [13:0] add_ln54_fu_457_p2;
reg   [13:0] add_ln54_reg_588;
reg    ap_block_state5_pp1_stage1_iter0;
reg    ap_block_pp1_stage1_11001;
reg   [3:0] p_keep_reg_593;
reg    ap_block_state6_pp1_stage2_iter0;
reg    ap_block_pp1_stage2_11001;
reg   [3:0] p_strb_reg_598;
reg   [1:0] p_user_reg_603;
reg   [0:0] p_last_reg_608;
reg   [4:0] p_id_reg_613;
reg   [5:0] p_dest_reg_618;
wire   [14:0] add_ln74_fu_521_p2;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state9_pp2_stage0_iter0;
reg    ap_block_state10_pp2_stage0_iter1;
reg    ap_block_state10_io;
reg    ap_block_state11_pp2_stage0_iter2;
reg    ap_block_state11_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln74_fu_527_p2;
wire    ap_CS_fsm_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage2_subdone;
wire    ap_CS_fsm_state8;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg   [14:0] i_reg_351;
wire   [0:0] icmp_ln17_fu_395_p2;
reg   [14:0] ap_phi_mux_i_1_phi_fu_366_p4;
wire   [63:0] zext_ln17_fu_401_p1;
wire   [63:0] zext_ln29_fu_462_p1;
wire   [63:0] zext_ln54_fu_517_p1;
wire   [63:0] zext_ln74_fu_533_p1;
reg    ap_block_pp2_stage0_01001;
wire   [7:0] select_ln534_fu_508_p3;
wire   [31:0] zext_ln29_1_fu_418_p1;
wire   [6:0] trunc_ln54_fu_445_p1;
wire   [13:0] shl_ln_fu_449_p3;
wire   [0:0] icmp_ln54_fu_502_p2;
reg   [8:0] ap_NS_fsm;
wire    ap_CS_fsm_state12;
wire    regslice_both_output_V_data_V_U_apdone_blk;
reg    ap_block_pp1_stage1_subdone;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_input_V_data_V_U_apdone_blk;
wire   [31:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_V_data_V_U_ack_in;
wire    regslice_both_input_V_keep_V_U_apdone_blk;
wire   [3:0] input_r_TKEEP_int_regslice;
wire    regslice_both_input_V_keep_V_U_vld_out;
wire    regslice_both_input_V_keep_V_U_ack_in;
wire    regslice_both_input_V_strb_V_U_apdone_blk;
wire   [3:0] input_r_TSTRB_int_regslice;
wire    regslice_both_input_V_strb_V_U_vld_out;
wire    regslice_both_input_V_strb_V_U_ack_in;
wire    regslice_both_input_V_user_V_U_apdone_blk;
wire   [1:0] input_r_TUSER_int_regslice;
wire    regslice_both_input_V_user_V_U_vld_out;
wire    regslice_both_input_V_user_V_U_ack_in;
wire    regslice_both_input_V_last_V_U_apdone_blk;
wire   [0:0] input_r_TLAST_int_regslice;
wire    regslice_both_input_V_last_V_U_vld_out;
wire    regslice_both_input_V_last_V_U_ack_in;
wire    regslice_both_input_V_id_V_U_apdone_blk;
wire   [4:0] input_r_TID_int_regslice;
wire    regslice_both_input_V_id_V_U_vld_out;
wire    regslice_both_input_V_id_V_U_ack_in;
wire    regslice_both_input_V_dest_V_U_apdone_blk;
wire   [5:0] input_r_TDEST_int_regslice;
wire    regslice_both_input_V_dest_V_U_vld_out;
wire    regslice_both_input_V_dest_V_U_ack_in;
wire   [31:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_V_data_V_U_vld_out;
wire    regslice_both_output_V_keep_V_U_apdone_blk;
wire    regslice_both_output_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_V_keep_V_U_vld_out;
wire    regslice_both_output_V_strb_V_U_apdone_blk;
wire    regslice_both_output_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_V_strb_V_U_vld_out;
wire    regslice_both_output_V_user_V_U_apdone_blk;
wire    regslice_both_output_V_user_V_U_ack_in_dummy;
wire    regslice_both_output_V_user_V_U_vld_out;
wire    regslice_both_output_V_last_V_U_apdone_blk;
wire    regslice_both_output_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_V_last_V_U_vld_out;
wire    regslice_both_output_V_id_V_U_apdone_blk;
wire    regslice_both_output_V_id_V_U_ack_in_dummy;
wire    regslice_both_output_V_id_V_U_vld_out;
wire    regslice_both_output_V_dest_V_U_apdone_blk;
wire    regslice_both_output_V_dest_V_U_ack_in_dummy;
wire    regslice_both_output_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

eventsToImage_img #(
    .DataWidth( 8 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
img_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(img_address0),
    .ce0(img_ce0),
    .we0(img_we0),
    .d0(img_d0),
    .q0(img_q0)
);

eventsToImage_aux_keep_V #(
    .DataWidth( 4 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
aux_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aux_keep_V_address0),
    .ce0(aux_keep_V_ce0),
    .we0(aux_keep_V_we0),
    .d0(aux_keep_V_d0),
    .q0(aux_keep_V_q0)
);

eventsToImage_aux_keep_V #(
    .DataWidth( 4 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
aux_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aux_strb_V_address0),
    .ce0(aux_strb_V_ce0),
    .we0(aux_strb_V_we0),
    .d0(aux_strb_V_d0),
    .q0(aux_strb_V_q0)
);

eventsToImage_aux_user_V #(
    .DataWidth( 2 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
aux_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aux_user_V_address0),
    .ce0(aux_user_V_ce0),
    .we0(aux_user_V_we0),
    .d0(aux_user_V_d0),
    .q0(aux_user_V_q0)
);

eventsToImage_aux_last_V #(
    .DataWidth( 1 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
aux_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aux_last_V_address0),
    .ce0(aux_last_V_ce0),
    .we0(aux_last_V_we0),
    .d0(aux_last_V_d0),
    .q0(aux_last_V_q0)
);

eventsToImage_aux_id_V #(
    .DataWidth( 5 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
aux_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aux_id_V_address0),
    .ce0(aux_id_V_ce0),
    .we0(aux_id_V_we0),
    .d0(aux_id_V_d0),
    .q0(aux_id_V_q0)
);

eventsToImage_aux_dest_V #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
aux_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(aux_dest_V_address0),
    .ce0(aux_dest_V_ce0),
    .we0(aux_dest_V_we0),
    .d0(aux_dest_V_d0),
    .q0(aux_dest_V_q0)
);

eventsToImage_hls_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_HLS_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_HLS_CTRL_DATA_WIDTH ))
hls_ctrl_s_axi_U(
    .AWVALID(s_axi_hls_ctrl_AWVALID),
    .AWREADY(s_axi_hls_ctrl_AWREADY),
    .AWADDR(s_axi_hls_ctrl_AWADDR),
    .WVALID(s_axi_hls_ctrl_WVALID),
    .WREADY(s_axi_hls_ctrl_WREADY),
    .WDATA(s_axi_hls_ctrl_WDATA),
    .WSTRB(s_axi_hls_ctrl_WSTRB),
    .ARVALID(s_axi_hls_ctrl_ARVALID),
    .ARREADY(s_axi_hls_ctrl_ARREADY),
    .ARADDR(s_axi_hls_ctrl_ARADDR),
    .RVALID(s_axi_hls_ctrl_RVALID),
    .RREADY(s_axi_hls_ctrl_RREADY),
    .RDATA(s_axi_hls_ctrl_RDATA),
    .RRESP(s_axi_hls_ctrl_RRESP),
    .BVALID(s_axi_hls_ctrl_BVALID),
    .BREADY(s_axi_hls_ctrl_BREADY),
    .BRESP(s_axi_hls_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .num_events(num_events)
);

eventsToImage_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_data_V_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_data_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TKEEP),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_keep_V_U_ack_in),
    .data_out(input_r_TKEEP_int_regslice),
    .vld_out(regslice_both_input_V_keep_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_keep_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TSTRB),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_strb_V_U_ack_in),
    .data_out(input_r_TSTRB_int_regslice),
    .vld_out(regslice_both_input_V_strb_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_strb_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 2 ))
regslice_both_input_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TUSER),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_user_V_U_ack_in),
    .data_out(input_r_TUSER_int_regslice),
    .vld_out(regslice_both_input_V_user_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_user_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TLAST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_last_V_U_ack_in),
    .data_out(input_r_TLAST_int_regslice),
    .vld_out(regslice_both_input_V_last_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_last_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 5 ))
regslice_both_input_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TID),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_id_V_U_ack_in),
    .data_out(input_r_TID_int_regslice),
    .vld_out(regslice_both_input_V_id_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_id_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 6 ))
regslice_both_input_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDEST),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_V_dest_V_U_ack_in),
    .data_out(input_r_TDEST_int_regslice),
    .vld_out(regslice_both_input_V_dest_V_U_vld_out),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_V_dest_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_data_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aux_keep_V_q0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_both_output_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_keep_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aux_strb_V_q0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_both_output_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_strb_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 2 ))
regslice_both_output_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aux_user_V_q0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_both_output_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_user_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aux_last_V_q0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_both_output_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_last_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 5 ))
regslice_both_output_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aux_id_V_q0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_id_V_U_ack_in_dummy),
    .data_out(output_r_TID),
    .vld_out(regslice_both_output_V_id_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_id_V_U_apdone_blk)
);

eventsToImage_regslice_both #(
    .DataWidth( 6 ))
regslice_both_output_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(aux_dest_V_q0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_both_output_V_dest_V_U_ack_in_dummy),
    .data_out(output_r_TDEST),
    .vld_out(regslice_both_output_V_dest_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state9)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_362 <= 15'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_362 <= add_ln29_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_reg_374 <= 15'd0;
    end else if (((icmp_ln74_fu_527_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_2_reg_374 <= add_ln74_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_351 <= 15'd0;
    end else if (((icmp_ln17_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_351 <= add_ln17_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        add_ln29_reg_562 <= add_ln29_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_reg_575 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        add_ln54_reg_588 <= add_ln54_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln29_reg_567 <= icmp_ln29_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln29_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln58_reg_584 <= icmp_ln58_fu_439_p2;
        icmp_ln878_reg_575 <= icmp_ln878_fu_430_p2;
        tmp_reg_571 <= ap_phi_mux_i_1_phi_fu_366_p4[32'd14];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln74_reg_628 <= icmp_ln74_fu_527_p2;
        icmp_ln74_reg_628_pp2_iter1_reg <= icmp_ln74_reg_628;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        num_events_read_reg_549 <= num_events;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001))) begin
        p_dest_reg_618 <= input_r_TDEST_int_regslice;
        p_id_reg_613 <= input_r_TID_int_regslice;
        p_keep_reg_593 <= input_r_TKEEP_int_regslice;
        p_last_reg_608 <= input_r_TLAST_int_regslice;
        p_strb_reg_598 <= input_r_TSTRB_int_regslice;
        p_user_reg_603 <= input_r_TUSER_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln878_fu_430_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln29_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        trunc_ln54_1_reg_579 <= trunc_ln54_1_fu_435_p1;
    end
end

always @ (*) begin
    if ((icmp_ln29_fu_412_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_527_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_366_p4 = add_ln29_reg_562;
    end else begin
        ap_phi_mux_i_1_phi_fu_366_p4 = i_1_reg_362;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        aux_dest_V_address0 = zext_ln74_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_dest_V_address0 = 14'd16383;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_dest_V_address0 = zext_ln29_fu_462_p1;
    end else begin
        aux_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        aux_dest_V_ce0 = 1'b1;
    end else begin
        aux_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_dest_V_d0 = p_dest_reg_618;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_dest_V_d0 = input_r_TDEST_int_regslice;
    end else begin
        aux_dest_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_571 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln58_reg_584 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        aux_dest_V_we0 = 1'b1;
    end else begin
        aux_dest_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        aux_id_V_address0 = zext_ln74_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_id_V_address0 = 14'd16383;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_id_V_address0 = zext_ln29_fu_462_p1;
    end else begin
        aux_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        aux_id_V_ce0 = 1'b1;
    end else begin
        aux_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_id_V_d0 = p_id_reg_613;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_id_V_d0 = input_r_TID_int_regslice;
    end else begin
        aux_id_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_571 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln58_reg_584 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        aux_id_V_we0 = 1'b1;
    end else begin
        aux_id_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        aux_keep_V_address0 = zext_ln74_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_keep_V_address0 = 14'd16383;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_keep_V_address0 = zext_ln29_fu_462_p1;
    end else begin
        aux_keep_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        aux_keep_V_ce0 = 1'b1;
    end else begin
        aux_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_keep_V_d0 = p_keep_reg_593;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_keep_V_d0 = input_r_TKEEP_int_regslice;
    end else begin
        aux_keep_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_571 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln58_reg_584 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        aux_keep_V_we0 = 1'b1;
    end else begin
        aux_keep_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        aux_last_V_address0 = zext_ln74_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_last_V_address0 = 14'd16383;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_last_V_address0 = zext_ln29_fu_462_p1;
    end else begin
        aux_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        aux_last_V_ce0 = 1'b1;
    end else begin
        aux_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_last_V_d0 = p_last_reg_608;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_last_V_d0 = input_r_TLAST_int_regslice;
    end else begin
        aux_last_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_571 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln58_reg_584 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        aux_last_V_we0 = 1'b1;
    end else begin
        aux_last_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        aux_strb_V_address0 = zext_ln74_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_strb_V_address0 = 14'd16383;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_strb_V_address0 = zext_ln29_fu_462_p1;
    end else begin
        aux_strb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        aux_strb_V_ce0 = 1'b1;
    end else begin
        aux_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_strb_V_d0 = p_strb_reg_598;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_strb_V_d0 = input_r_TSTRB_int_regslice;
    end else begin
        aux_strb_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_571 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln58_reg_584 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        aux_strb_V_we0 = 1'b1;
    end else begin
        aux_strb_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        aux_user_V_address0 = zext_ln74_fu_533_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_user_V_address0 = 14'd16383;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_user_V_address0 = zext_ln29_fu_462_p1;
    end else begin
        aux_user_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        aux_user_V_ce0 = 1'b1;
    end else begin
        aux_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        aux_user_V_d0 = p_user_reg_603;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        aux_user_V_d0 = input_r_TUSER_int_regslice;
    end else begin
        aux_user_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_reg_571 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln58_reg_584 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        aux_user_V_we0 = 1'b1;
    end else begin
        aux_user_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        img_address0 = zext_ln74_fu_533_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        img_address0 = zext_ln54_fu_517_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_address0 = zext_ln17_fu_401_p1;
    end else begin
        img_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        img_ce0 = 1'b1;
    end else begin
        img_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        img_d0 = select_ln534_fu_508_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        img_d0 = 8'd127;
    end else begin
        img_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln17_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln878_reg_575 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        img_we0 = 1'b1;
    end else begin
        img_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln29_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        input_r_TDATA_blk_n = input_r_TVALID_int_regslice;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage2) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage2_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln29_reg_567 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln29_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        input_r_TREADY_int_regslice = 1'b1;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln74_reg_628_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln74_reg_628 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln74_reg_628 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_395_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln29_fu_412_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((icmp_ln29_fu_412_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln74_fu_527_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln74_fu_527_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((regslice_both_output_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln17_fu_389_p2 = (i_reg_351 + 15'd1);

assign add_ln29_fu_406_p2 = (ap_phi_mux_i_1_phi_fu_366_p4 + 15'd1);

assign add_ln54_fu_457_p2 = (trunc_ln54_1_reg_579 + shl_ln_fu_449_p3);

assign add_ln74_fu_521_p2 = (i_2_reg_374 + 15'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_fu_412_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_fu_412_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_reg_567 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_reg_567 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_reg_567 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_reg_567 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter2 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628_pp2_iter1_reg == 1'd0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628 == 1'd0)))));
end

always @ (*) begin
    ap_block_state10_io = ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628 == 1'd0));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter1 = ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628 == 1'd0));
end

always @ (*) begin
    ap_block_state11_io = ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter2 = ((output_r_TREADY_int_regslice == 1'b0) & (icmp_ln74_reg_628_pp2_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp1_stage0_iter0 = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_fu_412_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state5_pp1_stage1_iter0 = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_reg_567 == 1'd0));
end

always @ (*) begin
    ap_block_state6_pp1_stage2_iter0 = ((input_r_TVALID_int_regslice == 1'b0) & (icmp_ln29_reg_567 == 1'd0));
end

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln17_fu_395_p2 = ((i_reg_351 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_412_p2 = ((ap_phi_mux_i_1_phi_fu_366_p4 == 15'd20000) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_502_p2 = ((input_r_TDATA_int_regslice != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_439_p2 = ((ap_phi_mux_i_1_phi_fu_366_p4 == 15'd19999) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_527_p2 = ((i_2_reg_374 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_430_p2 = ((zext_ln29_1_fu_418_p1 < num_events_read_reg_549) ? 1'b1 : 1'b0);

assign input_r_TREADY = regslice_both_input_V_data_V_U_ack_in;

assign output_r_TDATA_int_regslice = img_q0;

assign output_r_TVALID = regslice_both_output_V_data_V_U_vld_out;

assign select_ln534_fu_508_p3 = ((icmp_ln54_fu_502_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign shl_ln_fu_449_p3 = {{trunc_ln54_fu_445_p1}, {7'd0}};

assign trunc_ln54_1_fu_435_p1 = input_r_TDATA_int_regslice[13:0];

assign trunc_ln54_fu_445_p1 = input_r_TDATA_int_regslice[6:0];

assign zext_ln17_fu_401_p1 = i_reg_351;

assign zext_ln29_1_fu_418_p1 = ap_phi_mux_i_1_phi_fu_366_p4;

assign zext_ln29_fu_462_p1 = i_1_reg_362;

assign zext_ln54_fu_517_p1 = add_ln54_reg_588;

assign zext_ln74_fu_533_p1 = i_2_reg_374;

endmodule //eventsToImage
