-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eventsToImage is
generic (
    C_S_AXI_HLS_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_HLS_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    input_r_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_r_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    input_r_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_r_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    output_r_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_hls_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_hls_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_hls_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_HLS_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_hls_ctrl_WVALID : IN STD_LOGIC;
    s_axi_hls_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_hls_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_HLS_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_hls_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_HLS_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_hls_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_hls_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_hls_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_HLS_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_hls_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_hls_ctrl_RREADY : IN STD_LOGIC;
    s_axi_hls_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_HLS_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_hls_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_hls_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_hls_ctrl_BREADY : IN STD_LOGIC;
    s_axi_hls_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of eventsToImage is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eventsToImage_eventsToImage,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.720000,HLS_SYN_LAT=92775,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=230,HLS_SYN_LUT=663,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_4E20 : STD_LOGIC_VECTOR (14 downto 0) := "100111000100000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_4E1F : STD_LOGIC_VECTOR (14 downto 0) := "100111000011111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal num_events : STD_LOGIC_VECTOR (31 downto 0);
    signal img_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal img_ce0 : STD_LOGIC;
    signal img_we0 : STD_LOGIC;
    signal img_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal img_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal aux_keep_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal aux_keep_V_ce0 : STD_LOGIC;
    signal aux_keep_V_we0 : STD_LOGIC;
    signal aux_keep_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_keep_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_strb_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal aux_strb_V_ce0 : STD_LOGIC;
    signal aux_strb_V_we0 : STD_LOGIC;
    signal aux_strb_V_d0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_strb_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal aux_user_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal aux_user_V_ce0 : STD_LOGIC;
    signal aux_user_V_we0 : STD_LOGIC;
    signal aux_user_V_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal aux_user_V_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal aux_last_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal aux_last_V_ce0 : STD_LOGIC;
    signal aux_last_V_we0 : STD_LOGIC;
    signal aux_last_V_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal aux_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal aux_id_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal aux_id_V_ce0 : STD_LOGIC;
    signal aux_id_V_we0 : STD_LOGIC;
    signal aux_id_V_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal aux_id_V_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal aux_dest_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal aux_dest_V_ce0 : STD_LOGIC;
    signal aux_dest_V_we0 : STD_LOGIC;
    signal aux_dest_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal aux_dest_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln29_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal icmp_ln29_reg_567 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln74_reg_628 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal icmp_ln74_reg_628_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_362 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_2_reg_374 : STD_LOGIC_VECTOR (14 downto 0);
    signal num_events_read_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln17_fu_389_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln29_fu_406_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln29_reg_562 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_reg_571 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln54_1_fu_435_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln54_1_reg_579 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln58_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_fu_457_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln54_reg_588 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_state5_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal p_keep_reg_593 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state6_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal p_strb_reg_598 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_user_reg_603 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_last_reg_608 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_id_reg_613 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_dest_reg_618 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln74_fu_521_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state11_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln74_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal i_reg_351 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln17_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_1_phi_fu_366_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln17_fu_401_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal select_ln534_fu_508_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln29_1_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln54_fu_445_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_449_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln54_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal regslice_both_output_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal regslice_both_input_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_user_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TUSER_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_input_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_id_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TID_int_regslice : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_input_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal input_r_TDEST_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_input_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_V_dest_V_U_ack_in : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component eventsToImage_img IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component eventsToImage_aux_keep_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (3 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component eventsToImage_aux_user_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component eventsToImage_aux_last_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component eventsToImage_aux_id_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component eventsToImage_aux_dest_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component eventsToImage_hls_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        num_events : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eventsToImage_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    img_U : component eventsToImage_img
    generic map (
        DataWidth => 8,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => img_address0,
        ce0 => img_ce0,
        we0 => img_we0,
        d0 => img_d0,
        q0 => img_q0);

    aux_keep_V_U : component eventsToImage_aux_keep_V
    generic map (
        DataWidth => 4,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aux_keep_V_address0,
        ce0 => aux_keep_V_ce0,
        we0 => aux_keep_V_we0,
        d0 => aux_keep_V_d0,
        q0 => aux_keep_V_q0);

    aux_strb_V_U : component eventsToImage_aux_keep_V
    generic map (
        DataWidth => 4,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aux_strb_V_address0,
        ce0 => aux_strb_V_ce0,
        we0 => aux_strb_V_we0,
        d0 => aux_strb_V_d0,
        q0 => aux_strb_V_q0);

    aux_user_V_U : component eventsToImage_aux_user_V
    generic map (
        DataWidth => 2,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aux_user_V_address0,
        ce0 => aux_user_V_ce0,
        we0 => aux_user_V_we0,
        d0 => aux_user_V_d0,
        q0 => aux_user_V_q0);

    aux_last_V_U : component eventsToImage_aux_last_V
    generic map (
        DataWidth => 1,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aux_last_V_address0,
        ce0 => aux_last_V_ce0,
        we0 => aux_last_V_we0,
        d0 => aux_last_V_d0,
        q0 => aux_last_V_q0);

    aux_id_V_U : component eventsToImage_aux_id_V
    generic map (
        DataWidth => 5,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aux_id_V_address0,
        ce0 => aux_id_V_ce0,
        we0 => aux_id_V_we0,
        d0 => aux_id_V_d0,
        q0 => aux_id_V_q0);

    aux_dest_V_U : component eventsToImage_aux_dest_V
    generic map (
        DataWidth => 6,
        AddressRange => 16384,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => aux_dest_V_address0,
        ce0 => aux_dest_V_ce0,
        we0 => aux_dest_V_we0,
        d0 => aux_dest_V_d0,
        q0 => aux_dest_V_q0);

    hls_ctrl_s_axi_U : component eventsToImage_hls_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_HLS_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_HLS_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_hls_ctrl_AWVALID,
        AWREADY => s_axi_hls_ctrl_AWREADY,
        AWADDR => s_axi_hls_ctrl_AWADDR,
        WVALID => s_axi_hls_ctrl_WVALID,
        WREADY => s_axi_hls_ctrl_WREADY,
        WDATA => s_axi_hls_ctrl_WDATA,
        WSTRB => s_axi_hls_ctrl_WSTRB,
        ARVALID => s_axi_hls_ctrl_ARVALID,
        ARREADY => s_axi_hls_ctrl_ARREADY,
        ARADDR => s_axi_hls_ctrl_ARADDR,
        RVALID => s_axi_hls_ctrl_RVALID,
        RREADY => s_axi_hls_ctrl_RREADY,
        RDATA => s_axi_hls_ctrl_RDATA,
        RRESP => s_axi_hls_ctrl_RRESP,
        BVALID => s_axi_hls_ctrl_BVALID,
        BREADY => s_axi_hls_ctrl_BREADY,
        BRESP => s_axi_hls_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        num_events => num_events);

    regslice_both_input_V_data_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_data_V_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_data_V_U_apdone_blk);

    regslice_both_input_V_keep_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TKEEP,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_keep_V_U_ack_in,
        data_out => input_r_TKEEP_int_regslice,
        vld_out => regslice_both_input_V_keep_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_keep_V_U_apdone_blk);

    regslice_both_input_V_strb_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TSTRB,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_strb_V_U_ack_in,
        data_out => input_r_TSTRB_int_regslice,
        vld_out => regslice_both_input_V_strb_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_strb_V_U_apdone_blk);

    regslice_both_input_V_user_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TUSER,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_user_V_U_ack_in,
        data_out => input_r_TUSER_int_regslice,
        vld_out => regslice_both_input_V_user_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_user_V_U_apdone_blk);

    regslice_both_input_V_last_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TLAST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_last_V_U_ack_in,
        data_out => input_r_TLAST_int_regslice,
        vld_out => regslice_both_input_V_last_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_last_V_U_apdone_blk);

    regslice_both_input_V_id_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TID,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_id_V_U_ack_in,
        data_out => input_r_TID_int_regslice,
        vld_out => regslice_both_input_V_id_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_id_V_U_apdone_blk);

    regslice_both_input_V_dest_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDEST,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_V_dest_V_U_ack_in,
        data_out => input_r_TDEST_int_regslice,
        vld_out => regslice_both_input_V_dest_V_U_vld_out,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_V_dest_V_U_apdone_blk);

    regslice_both_output_V_data_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_data_V_U_apdone_blk);

    regslice_both_output_V_keep_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aux_keep_V_q0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_both_output_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_keep_V_U_apdone_blk);

    regslice_both_output_V_strb_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aux_strb_V_q0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_both_output_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_strb_V_U_apdone_blk);

    regslice_both_output_V_user_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aux_user_V_q0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_both_output_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_user_V_U_apdone_blk);

    regslice_both_output_V_last_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aux_last_V_q0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_both_output_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_last_V_U_apdone_blk);

    regslice_both_output_V_id_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 5)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aux_id_V_q0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_id_V_U_ack_in_dummy,
        data_out => output_r_TID,
        vld_out => regslice_both_output_V_id_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_id_V_U_apdone_blk);

    regslice_both_output_V_dest_V_U : component eventsToImage_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => aux_dest_V_q0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_both_output_V_dest_V_U_ack_in_dummy,
        data_out => output_r_TDEST,
        vld_out => regslice_both_output_V_dest_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_362 <= ap_const_lv15_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_362 <= add_ln29_reg_562;
            end if; 
        end if;
    end process;

    i_2_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_2_reg_374 <= ap_const_lv15_0;
            elsif (((icmp_ln74_fu_527_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_2_reg_374 <= add_ln74_fu_521_p2;
            end if; 
        end if;
    end process;

    i_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_351 <= ap_const_lv15_0;
            elsif (((icmp_ln17_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_351 <= add_ln17_fu_389_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                add_ln29_reg_562 <= add_ln29_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_reg_575 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                add_ln54_reg_588 <= add_ln54_fu_457_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln29_reg_567 <= icmp_ln29_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln58_reg_584 <= icmp_ln58_fu_439_p2;
                icmp_ln878_reg_575 <= icmp_ln878_fu_430_p2;
                tmp_reg_571 <= ap_phi_mux_i_1_phi_fu_366_p4(14 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln74_reg_628 <= icmp_ln74_fu_527_p2;
                icmp_ln74_reg_628_pp2_iter1_reg <= icmp_ln74_reg_628;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                num_events_read_reg_549 <= num_events;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001))) then
                p_dest_reg_618 <= input_r_TDEST_int_regslice;
                p_id_reg_613 <= input_r_TID_int_regslice;
                p_keep_reg_593 <= input_r_TKEEP_int_regslice;
                p_last_reg_608 <= input_r_TLAST_int_regslice;
                p_strb_reg_598 <= input_r_TSTRB_int_regslice;
                p_user_reg_603 <= input_r_TUSER_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln878_fu_430_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                trunc_ln54_1_reg_579 <= trunc_ln54_1_fu_435_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp1_iter0, icmp_ln29_fu_412_p2, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_CS_fsm_state2, ap_enable_reg_pp2_iter0, icmp_ln74_fu_527_p2, ap_block_pp1_stage0_subdone, ap_block_pp1_stage2_subdone, ap_block_pp2_stage0_subdone, icmp_ln17_fu_395_p2, ap_CS_fsm_state12, regslice_both_output_V_data_V_U_apdone_blk, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln29_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((icmp_ln29_fu_412_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln74_fu_527_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((icmp_ln74_fu_527_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((regslice_both_output_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln17_fu_389_p2 <= std_logic_vector(unsigned(i_reg_351) + unsigned(ap_const_lv15_1));
    add_ln29_fu_406_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_366_p4) + unsigned(ap_const_lv15_1));
    add_ln54_fu_457_p2 <= std_logic_vector(unsigned(trunc_ln54_1_reg_579) + unsigned(shl_ln_fu_449_p3));
    add_ln74_fu_521_p2 <= std_logic_vector(unsigned(i_2_reg_374) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_fu_412_p2, input_r_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_11001 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_fu_412_p2, input_r_TVALID_int_regslice)
    begin
                ap_block_pp1_stage0_subdone <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage1_11001_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, input_r_TVALID_int_regslice)
    begin
                ap_block_pp1_stage1_11001 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage1_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, input_r_TVALID_int_regslice)
    begin
                ap_block_pp1_stage1_subdone <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage2_11001_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, input_r_TVALID_int_regslice)
    begin
                ap_block_pp1_stage2_11001 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage2_subdone_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, input_r_TVALID_int_regslice)
    begin
                ap_block_pp1_stage2_subdone <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln74_reg_628, ap_enable_reg_pp2_iter2, icmp_ln74_reg_628_pp2_iter1_reg, output_r_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_01001 <= (((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1)) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln74_reg_628, ap_enable_reg_pp2_iter2, icmp_ln74_reg_628_pp2_iter1_reg, ap_block_state10_io, ap_block_state11_io, output_r_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_11001 <= (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628_pp2_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628 = ap_const_lv1_0)))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln74_reg_628, ap_enable_reg_pp2_iter2, icmp_ln74_reg_628_pp2_iter1_reg, ap_block_state10_io, ap_block_state11_io, output_r_TREADY_int_regslice)
    begin
                ap_block_pp2_stage0_subdone <= (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628_pp2_iter1_reg = ap_const_lv1_0)))) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628 = ap_const_lv1_0)))));
    end process;


    ap_block_state10_io_assign_proc : process(icmp_ln74_reg_628, output_r_TREADY_int_regslice)
    begin
                ap_block_state10_io <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628 = ap_const_lv1_0));
    end process;


    ap_block_state10_pp2_stage0_iter1_assign_proc : process(icmp_ln74_reg_628, output_r_TREADY_int_regslice)
    begin
                ap_block_state10_pp2_stage0_iter1 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628 = ap_const_lv1_0));
    end process;


    ap_block_state11_io_assign_proc : process(icmp_ln74_reg_628_pp2_iter1_reg, output_r_TREADY_int_regslice)
    begin
                ap_block_state11_io <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628_pp2_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state11_pp2_stage0_iter2_assign_proc : process(icmp_ln74_reg_628_pp2_iter1_reg, output_r_TREADY_int_regslice)
    begin
                ap_block_state11_pp2_stage0_iter2 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (icmp_ln74_reg_628_pp2_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_state4_pp1_stage0_iter0_assign_proc : process(icmp_ln29_fu_412_p2, input_r_TVALID_int_regslice)
    begin
                ap_block_state4_pp1_stage0_iter0 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0));
    end process;


    ap_block_state5_pp1_stage1_iter0_assign_proc : process(icmp_ln29_reg_567, input_r_TVALID_int_regslice)
    begin
                ap_block_state5_pp1_stage1_iter0 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_reg_567 = ap_const_lv1_0));
    end process;


    ap_block_state6_pp1_stage2_iter0_assign_proc : process(icmp_ln29_reg_567, input_r_TVALID_int_regslice)
    begin
                ap_block_state6_pp1_stage2_iter0 <= ((input_r_TVALID_int_regslice = ap_const_logic_0) and (icmp_ln29_reg_567 = ap_const_lv1_0));
    end process;

        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln29_fu_412_p2)
    begin
        if ((icmp_ln29_fu_412_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(icmp_ln74_fu_527_p2)
    begin
        if ((icmp_ln74_fu_527_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_366_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, icmp_ln29_reg_567, i_1_reg_362, add_ln29_reg_562, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_366_p4 <= add_ln29_reg_562;
        else 
            ap_phi_mux_i_1_phi_fu_366_p4 <= i_1_reg_362;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    aux_dest_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, zext_ln29_fu_462_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            aux_dest_V_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_dest_V_address0 <= ap_const_lv14_3FFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_dest_V_address0 <= zext_ln29_fu_462_p1(14 - 1 downto 0);
        else 
            aux_dest_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_dest_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            aux_dest_V_ce0 <= ap_const_logic_1;
        else 
            aux_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_dest_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, p_dest_reg_618, ap_enable_reg_pp1_iter1, input_r_TDEST_int_regslice)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_dest_V_d0 <= p_dest_reg_618;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_dest_V_d0 <= input_r_TDEST_int_regslice;
        else 
            aux_dest_V_d0 <= "XXXXXX";
        end if; 
    end process;


    aux_dest_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, tmp_reg_571, icmp_ln58_reg_584, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((tmp_reg_571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln58_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            aux_dest_V_we0 <= ap_const_logic_1;
        else 
            aux_dest_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_id_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, zext_ln29_fu_462_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            aux_id_V_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_id_V_address0 <= ap_const_lv14_3FFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_id_V_address0 <= zext_ln29_fu_462_p1(14 - 1 downto 0);
        else 
            aux_id_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_id_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            aux_id_V_ce0 <= ap_const_logic_1;
        else 
            aux_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_id_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, p_id_reg_613, ap_enable_reg_pp1_iter1, input_r_TID_int_regslice)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_id_V_d0 <= p_id_reg_613;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_id_V_d0 <= input_r_TID_int_regslice;
        else 
            aux_id_V_d0 <= "XXXXX";
        end if; 
    end process;


    aux_id_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, tmp_reg_571, icmp_ln58_reg_584, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((tmp_reg_571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln58_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            aux_id_V_we0 <= ap_const_logic_1;
        else 
            aux_id_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_keep_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, zext_ln29_fu_462_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            aux_keep_V_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_keep_V_address0 <= ap_const_lv14_3FFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_keep_V_address0 <= zext_ln29_fu_462_p1(14 - 1 downto 0);
        else 
            aux_keep_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_keep_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            aux_keep_V_ce0 <= ap_const_logic_1;
        else 
            aux_keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_keep_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, p_keep_reg_593, ap_enable_reg_pp1_iter1, input_r_TKEEP_int_regslice)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_keep_V_d0 <= p_keep_reg_593;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_keep_V_d0 <= input_r_TKEEP_int_regslice;
        else 
            aux_keep_V_d0 <= "XXXX";
        end if; 
    end process;


    aux_keep_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, tmp_reg_571, icmp_ln58_reg_584, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((tmp_reg_571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln58_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            aux_keep_V_we0 <= ap_const_logic_1;
        else 
            aux_keep_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_last_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, zext_ln29_fu_462_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            aux_last_V_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_last_V_address0 <= ap_const_lv14_3FFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_last_V_address0 <= zext_ln29_fu_462_p1(14 - 1 downto 0);
        else 
            aux_last_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_last_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            aux_last_V_ce0 <= ap_const_logic_1;
        else 
            aux_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_last_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, p_last_reg_608, ap_enable_reg_pp1_iter1, input_r_TLAST_int_regslice)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_last_V_d0 <= p_last_reg_608;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_last_V_d0 <= input_r_TLAST_int_regslice;
        else 
            aux_last_V_d0 <= "X";
        end if; 
    end process;


    aux_last_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, tmp_reg_571, icmp_ln58_reg_584, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((tmp_reg_571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln58_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            aux_last_V_we0 <= ap_const_logic_1;
        else 
            aux_last_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_strb_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, zext_ln29_fu_462_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            aux_strb_V_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_strb_V_address0 <= ap_const_lv14_3FFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_strb_V_address0 <= zext_ln29_fu_462_p1(14 - 1 downto 0);
        else 
            aux_strb_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_strb_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            aux_strb_V_ce0 <= ap_const_logic_1;
        else 
            aux_strb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_strb_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, p_strb_reg_598, ap_enable_reg_pp1_iter1, input_r_TSTRB_int_regslice)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_strb_V_d0 <= p_strb_reg_598;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_strb_V_d0 <= input_r_TSTRB_int_regslice;
        else 
            aux_strb_V_d0 <= "XXXX";
        end if; 
    end process;


    aux_strb_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, tmp_reg_571, icmp_ln58_reg_584, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((tmp_reg_571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln58_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            aux_strb_V_we0 <= ap_const_logic_1;
        else 
            aux_strb_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_user_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter1, zext_ln29_fu_462_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            aux_user_V_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_user_V_address0 <= ap_const_lv14_3FFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_user_V_address0 <= zext_ln29_fu_462_p1(14 - 1 downto 0);
        else 
            aux_user_V_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    aux_user_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            aux_user_V_ce0 <= ap_const_logic_1;
        else 
            aux_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    aux_user_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, p_user_reg_603, ap_enable_reg_pp1_iter1, input_r_TUSER_int_regslice)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            aux_user_V_d0 <= p_user_reg_603;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            aux_user_V_d0 <= input_r_TUSER_int_regslice;
        else 
            aux_user_V_d0 <= "XX";
        end if; 
    end process;


    aux_user_V_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, tmp_reg_571, icmp_ln58_reg_584, ap_block_pp1_stage2_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((tmp_reg_571 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln58_reg_584 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            aux_user_V_we0 <= ap_const_logic_1;
        else 
            aux_user_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln17_fu_395_p2 <= "1" when (i_reg_351 = ap_const_lv15_4000) else "0";
    icmp_ln29_fu_412_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_366_p4 = ap_const_lv15_4E20) else "0";
    icmp_ln54_fu_502_p2 <= "0" when (input_r_TDATA_int_regslice = ap_const_lv32_0) else "1";
    icmp_ln58_fu_439_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_366_p4 = ap_const_lv15_4E1F) else "0";
    icmp_ln74_fu_527_p2 <= "1" when (i_2_reg_374 = ap_const_lv15_4000) else "0";
    icmp_ln878_fu_430_p2 <= "1" when (unsigned(zext_ln29_1_fu_418_p1) < unsigned(num_events_read_reg_549)) else "0";

    img_address0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0, ap_CS_fsm_state2, ap_enable_reg_pp2_iter0, zext_ln17_fu_401_p1, zext_ln54_fu_517_p1, zext_ln74_fu_533_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            img_address0 <= zext_ln74_fu_533_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            img_address0 <= zext_ln54_fu_517_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_address0 <= zext_ln17_fu_401_p1(14 - 1 downto 0);
        else 
            img_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    img_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp2_stage0, ap_CS_fsm_state2, ap_block_pp1_stage2_11001, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            img_ce0 <= ap_const_logic_1;
        else 
            img_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    img_d0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, ap_CS_fsm_state2, select_ln534_fu_508_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            img_d0 <= select_ln534_fu_508_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_d0 <= ap_const_lv8_7F;
        else 
            img_d0 <= "XXXXXXXX";
        end if; 
    end process;


    img_we0_assign_proc : process(ap_enable_reg_pp1_iter0, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_CS_fsm_state2, icmp_ln878_reg_575, ap_block_pp1_stage2_11001, icmp_ln17_fu_395_p2)
    begin
        if ((((icmp_ln17_fu_395_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln878_reg_575 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            img_we0 <= ap_const_logic_1;
        else 
            img_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0, icmp_ln29_fu_412_p2, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage2, input_r_TVALID_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            input_r_TDATA_blk_n <= input_r_TVALID_int_regslice;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_r_TREADY <= regslice_both_input_V_data_V_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, icmp_ln29_fu_412_p2, ap_CS_fsm_pp1_stage1, icmp_ln29_reg_567, ap_CS_fsm_pp1_stage2, ap_block_pp1_stage0_11001, ap_block_pp1_stage1_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln29_reg_567 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln29_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            input_r_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln74_reg_628, ap_enable_reg_pp2_iter2, icmp_ln74_reg_628_pp2_iter1_reg, output_r_TREADY_int_regslice)
    begin
        if ((((icmp_ln74_reg_628_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln74_reg_628 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(img_q0),32));
    output_r_TVALID <= regslice_both_output_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln74_reg_628, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln74_reg_628 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln534_fu_508_p3 <= 
        ap_const_lv8_FF when (icmp_ln54_fu_502_p2(0) = '1') else 
        ap_const_lv8_0;
    shl_ln_fu_449_p3 <= (trunc_ln54_fu_445_p1 & ap_const_lv7_0);
    trunc_ln54_1_fu_435_p1 <= input_r_TDATA_int_regslice(14 - 1 downto 0);
    trunc_ln54_fu_445_p1 <= input_r_TDATA_int_regslice(7 - 1 downto 0);
    zext_ln17_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_351),64));
    zext_ln29_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_1_phi_fu_366_p4),32));
    zext_ln29_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_362),64));
    zext_ln54_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_reg_588),64));
    zext_ln74_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_374),64));
end behav;
